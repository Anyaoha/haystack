# Open questions:
# - Which AWS credentials/configurations do we use?
# - Which AMI do we use? Can we reuse the one from the lambda function?
# - Which parameters do we need to pass additionally for the Launch EC2 Instance step?

name: Benchmarks

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at 00:00
  workflow_dispatch:

jobs:
  get-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: set-matrix
        run: |
          CONFIGS=$(find test/benchmarks/configs -type f -name "*.yml" | sed 's/test\/benchmarks\/configs\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$CONFIGS" >> "$GITHUB_OUTPUT"

  run-benchmarks:
    runs-on: ubuntu-latest
    needs: get-configs
    strategy:
      matrix:
        config: ${{ fromJson(needs.get-configs.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: TBD
          aws-secret-access-key: TBD
          aws-region: TBD

      - name: Launch EC2 Instance
        id: launch-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id TBD \
            --instance-type p3.2xlarge)
          echo "INSTANCE_ID=$INSTANCE_ID" >> "$GITHUB_ENV"
          echo "Launched EC2 Instance $INSTANCE_ID for config file ${{ matrix.config }}."
          aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}
          echo "EC2 Instance $INSTANCE_ID for config file ${{ matrix.config }} is running."

      - name: Clone Repository on EC2 Instance
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Clone Repository" \
            --parameters commands="git clone https://github.com/deepset-ai/haystack.git" \
            --query "Command.CommandId" \
            --output text)
            aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id ${{ env.INSTANCE_ID }}

      - name: Prepare Environment on EC2 Instance
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Install Dependencies" \
            --parameters commands="cd haystack/test/benchmarks && ./prepare_env.sh" \
            --query "Command.CommandId" \
            --output text)
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id ${{ env.INSTANCE_ID }}
          echo "Environment prepared on EC2 Instance ${{ env.INSTANCE_ID }} for config file ${{ matrix.config }}."

      - name: Start Benchmark Run
        id: benchmark-start
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Run Benchmark" \
            --parameters commands="python run_benchmark.py --config ${{ matrix.config }} --output out/${{ matrix.config }}.json" \
            --query "Command.CommandId" \
            --output text)
          echo "Benchmark for ${{ matrix.config }} on EC2 Instance ${{ env.INSTANCE_ID }} has started."
          echo "COMMAND_ID=$COMMAND_ID" >> "$GITHUB_OUTPUT"


      - name: Wait for Benchmark Completion
        run: |
          while true
          do
            COMMAND_STATUS=$(aws ssm list-command-invocations \
              --command-id ${{ steps.benchmark-start.outputs.command-id }} \
              --query "CommandInvocations[0].Status" \
              --output text)
            if [[ $COMMAND_STATUS == "Success" ]]; then
              echo "Benchmark for ${{ matrix.config }} on EC2 Instance ${{ env.INSTANCE_ID }} completed successfully."
              break
            elif [[ $COMMAND_STATUS != "Pending" && $COMMAND_STATUS != "InProgress" ]]; then
              echo "Benchmark for ${{ matrix.config }} on EC2 Instance ${{ env.INSTANCE_ID }} failed."
              break
            else
              echo "Benchmark for ${{ matrix.config }} on EC2 Instance ${{ env.INSTANCE_ID }} is still running."
              sleep 60
            fi
          done

      - name: Send Benchmark results to Datadog
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Send Benchmark Results to Datadog" \
            --parameters commands="python datadog/send_metrics.py" \
            --query "Command.CommandId" \
            --output text)
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id ${{ env.INSTANCE_ID }}

      - name: Terminate EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          echo "Terminated EC2 Instance ${{ env.INSTANCE_ID }} for config file ${{ matrix.config }}."
