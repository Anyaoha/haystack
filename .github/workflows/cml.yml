name: benchmarks

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at 00:00
  workflow_dispatch:

jobs:
  get-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: set-matrix
        run: |
          CONFIGS=$(find test/benchmarks/configs -type f -name "*.yml" | sed 's/test\/benchmarks\/configs\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$CONFIGS" >> "$GITHUB_OUTPUT"

  deploy-runners:
    runs-on: ubuntu-latest
    needs: get-configs
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.get-configs.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - uses: iterative/setup-cml@v1

      - name: deploy
        env:
          repo_token: ${{ secrets.HAYSTACK_BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CI_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CI_SECRET_ACCESS_KEY }}
          AWS_CML_SECURITY_GROUP: ${{ secrets.AWS_CML_SECURITY_GROUP }}
        run: |
          cml runner launch \
          --cloud aws \
          --cloud-region us-east-1 \
          --cloud-type=p3.2xlarge \
          --cloud-aws-security-group="$AWS_CML_SECURITY_GROUP" \
          --labels=${{ matrix.config }}

  run-benchmarks:
    needs:
      - get-configs
      - deploy-runners
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.get-configs.outputs.matrix) }}
    runs-on: ${{ matrix.config }}
    container:
      image: docker://iterativeai/cml:0-dvc2-base1-gpu
      options: --gpus all
    steps:
      - uses: actions/checkout@v3

      - name: Install Haystack
        run: pip install .[metrics,elasticsearch,weaviate,opensearch,benchmarks,inference]

      - name: Run benchmarks
        run: |
          mkdir +p out
          python run_benchmark.py --config ${{ matrix.config }} --output out/${{ matrix.config }}.json

      - name: Send Benchmark results to Datadog
        run: |
          python datadog/send_metrics.py
